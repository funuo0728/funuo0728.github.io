<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>A Bit More Common (2024牛客多校1 B)</title>
      <link href="/2024/07/21/A-Bit-More-Common-2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A11-B/"/>
      <url>/2024/07/21/A-Bit-More-Common-2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A11-B/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Bit-More-Common"><a href="#A-Bit-More-Common" class="headerlink" title="A Bit More Common"></a><a href="https://ac.nowcoder.com/acm/contest/81596/B">A Bit More Common</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>给定两个整数$n$和$m(1 \le n,m \le 5000)$，在所有长度为$n$且元素取值范围为$[0, 2 ^ m)$的序列中，计算存在两个合法子序列的序列个数。其中，合法子序列是指子序列中所有元素按位与的结果为$1$。</p><p>由于答案可能很大，请将其对$q(1 \le q \le 10^9)$取模。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>首先考虑至少存在一个合法子序列的序列个数，对于合法子序列中的元素，第$0$位必须全为$1$，其余位上至少有一个$0$，对于剩下的其他元素，第$0$位必须全为$0$，其余位任选。我们对序列长度进行枚举，最终得到：</p><p>$\sum_{i &#x3D; 1}^{n}C_{n}^{i}(2 ^ {i} - 1)^{m - 1}2^{(m - 1)(n-i)}$    $①$</p><p>题目要求我们求至少存在两个合法子序列的序列个数，那么接下来只需要求恰好只有一个合法子序列的情况，最后用至少$1$个的方案数减去恰好$1$个的方案数即为所求结果。</p><p>考虑这样一种按位与为$1$的子序列，去掉其中任何一个元素，他们的按位与都会变得不为$1$。首先这些元素的第$0$位上肯定都为$1$，自然想到如果某一个数在某一位上为$0$，而其余数在这一位上都为$1$，那么这个数就是不可或缺的。姑且将这种有且只有一个数在这一位上为$0$的位称为特殊位，只要每一个数都至少对应一位特殊位，这样得到的子序列就是要求的子序列。</p><p>考虑二维$dp$，$f[i][j]$表示总共有$i$个数，$j$位特殊位，每个数至少对应一个特殊位的方案数。</p><p>对于$f[i][j]$来说，每加入一位特殊位，可以使$i$个数字中的其中一个对应它，共有$i$种情况；也可以新增一个数字来对应它，然后发现从$f[i][j]$到$f[i +1][j + 1]$难以确定转移方程，于是思考从$f[i + 1][j + 1]$到$f[i][j]$，发现去掉一个特殊位并使数减少的情况共有$i + 1$种，最终可得转移方程：</p><p>$f[i][j] &#x3D; i\cdot f[i][j - 1] + i\cdot f[i - 1][j - 1]$</p><p>那么恰好存在一个合法子序列的思考方式与至少存在一个类似：</p><p>首先确定子序列的长度$i$，取长度为$i$的子序列的方案数为$C_{n}^{i}$，</p><p>第$0$位全部为$1$，每个数至少对应$1$个特殊位，那么现在确定特殊位的个数$j$，至少为$i$，至多为$m - 1$，取$j$个特殊位的方案数为$C_{m -1}^{j}$，</p><p>这$i$个数对应$j$个特殊位的方案数位$f[i][j]$，</p><p>对于除去第$0$位和特殊位的其他位，每一位的总方案数为$2 ^ i$，减去全为$1$的情况为$2 ^ i -1$，再减去使这一位成为特殊位的情况$2 ^ i - i - 1$，最后这样的位有$m - 1 - j$个，那么方案数为$(2^i - i - 1) ^ {m-1-j}$，</p><p>最后考虑其余数字，对于这些数字来说，除了第$0$位，其余位任填，方案数位$2 ^ {(m - 1)(n-i)}$，</p><p>最终方案数为：</p><p>$\sum_{i &#x3D; 1}^{n}2^{(m - 1)(n - i)}C_n^i\cdot\sum_{j&#x3D;i}^{m-1}C_{m-1}^jf[i][j](2^i - i - 1) ^ {m-1-j} $   $②$</p><p>最后用$①$式减去$②$式即可。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 5010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__int128_t</span> i128;</span><br><span class="line">i128 _base=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, mod, res = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> C[maxn][maxn], f[maxn][maxn], pow2[maxn], tt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mol</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> x-mod*(_base*x&gt;&gt;<span class="number">64</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;  a = <span class="built_in">mol</span>(a);</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)  res = <span class="built_in">mol</span>(res * a);</span><br><span class="line">        a = <span class="built_in">mol</span>(a * a);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; mod;</span><br><span class="line"></span><br><span class="line">    _base=(_base&lt;&lt;<span class="number">64</span>)/mod;</span><br><span class="line"></span><br><span class="line">    pow2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)  pow2[i] = pow2[i - <span class="number">1</span>] * <span class="number">2</span> % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)  tt[i] = <span class="built_in">qmi</span>(<span class="number">2</span>, (m - <span class="number">1</span>) * (n - i), mod);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">0</span>)  C[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>  C[i][j] = (C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= m - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)  f[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>  f[i][j] = i * (f[i][j - <span class="number">1</span>] + f[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> t1 = C[n][i] * <span class="built_in">qmi</span>((pow2[i] + mod - <span class="number">1</span>) % mod, m - <span class="number">1</span>, mod) % mod * tt[i] % mod;</span><br><span class="line">        res = (res + t1) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    res = ((res - C[n][<span class="number">1</span>] * <span class="built_in">qmi</span>(<span class="number">2</span>, (n - <span class="number">1</span>) * (m - <span class="number">1</span>), mod) % mod) % mod + mod) % mod;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= m - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> t1 = C[n][i] * tt[i] % mod;</span><br><span class="line">            <span class="type">int</span> t2 = C[m - <span class="number">1</span>][j] * f[i][j] % mod * <span class="built_in">qmi</span>(((pow2[i] - i - <span class="number">1</span>) % mod + mod) % mod, m - <span class="number">1</span> - j, mod) % mod;</span><br><span class="line">            res = ((res - (t1 * t2 % mod)) % mod + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);  cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2024牛客多校1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mirror Maze (2024牛客多校1 I)</title>
      <link href="/2024/07/20/Mirror-Maze/"/>
      <url>/2024/07/20/Mirror-Maze/</url>
      
        <content type="html"><![CDATA[<h1 id="Mirror-Maze"><a href="#Mirror-Maze" class="headerlink" title="Mirror Maze"></a><a href="https://ac.nowcoder.com/acm/contest/81596/I">Mirror Maze</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>给定一个$n \times m(1 \le n,m \le 1000)$大小的矩阵，每个格子上都有一面镜子，镜子共有以下$4$种类型：</p><ul><li>“$-$” 反射来自上方和下方的光，来自左边和右边的光将平行穿过；</li><li>“$|$” 反射来自左边和右边的光，来自上方和下方的光将平行穿过；</li><li>“$\setminus$” 将来自上、下、左、右方向的光反射成朝向分别为右、左、下、上的光；</li><li>“$&#x2F;$” 将来自上、下、左、右方向的光反射成朝向分别为左、右、上、下的光；</li></ul><p>共有$q(1 \le q \le 10^5)$次询问，每次给出光源的位置和方向，问每个光源的光最终会反射多少枚不同的镜子。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>由于$n \times m$的大小的$10^6$，算上每格所包含的4种不同状态数量级依然为$10^6$，那么总共是$4 \times 10 ^ 6$个点，可以想到遍历预处理。</p><p>继续思考每个每个点之间的关系，发现每个点只能唯一地转移到下一个点，所以光的运动轨迹要么是个环，要么是一条链，环与链都是各自独立的，并且链的两端一定对应矩形的边界。换句话说，光一定是从外界进入到矩阵，再从矩阵中被反射出去，或者会一直在矩阵中循环。</p><p>厘清这一点就可以想到只需要对最外围的一圈做一次$bfs$或$dfs$遍历就可以预处理出所有的链，等询问碰到环的情况再去处理环。奈何笔者笨了点，并没有想到这样写，补题时的想法是反正每个点都要被遍历，那就在询问的时候进行遍历也是一样的。结果这样写还得把当前点所处的一整条链遍历处理才行，也就是说，笔者的做法是对于处在一条链上的点，首先按照反方向找到链的起点，再反向遍历到终点才行。</p><p>那么如何统计环和链所反射的镜子个数呢，只需要用一个$set$去存储所遍历过的镜子即可，注意到对于斜放的镜子，两面都有可能会被光经过，所以笔者采用$set$避免重复计算。</p><p>剩下的就只是对于模拟光在镜子上的反射过程了，比较繁琐但思路清晰，不再赘述。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, res[maxn][maxn][<span class="number">5</span>], wk[<span class="number">5</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="type">bool</span> vis[maxn][maxn][<span class="number">5</span>];</span><br><span class="line"><span class="type">char</span> g[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cur = (x - <span class="number">1</span>) * m * <span class="number">4</span> + (y - <span class="number">1</span>) * <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="string">&quot;above&quot;</span>)  cur += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;below&quot;</span>)  cur += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;left&quot;</span>)  cur += <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;right&quot;</span>)  cur += <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cur = (x - <span class="number">1</span>) * m * <span class="number">4</span> + (y - <span class="number">1</span>) * <span class="number">4</span> + s;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">irrget</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    node tmp = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    tmp.s = (x - <span class="number">1</span>) % <span class="number">4</span> + <span class="number">1</span>;</span><br><span class="line">    tmp.y = ((x - <span class="number">1</span>) % (<span class="number">4</span> * m) + <span class="number">1</span> + <span class="number">3</span>) / <span class="number">4</span>;</span><br><span class="line">    tmp.x = (x + <span class="number">4</span> * m - <span class="number">1</span>) / (<span class="number">4</span> * m);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getdir</span><span class="params">(<span class="type">int</span> x, <span class="type">char</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&#x27;-&#x27;</span>)  res = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;|&#x27;</span>)  res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;/&#x27;</span>)  res = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;\\&#x27;</span>) res = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&#x27;-&#x27;</span>)  res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;|&#x27;</span>)  res = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;/&#x27;</span>)  res = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;\\&#x27;</span>)  res = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&#x27;-&#x27;</span>)  res = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;|&#x27;</span>)  res = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;/&#x27;</span>)  res = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;\\&#x27;</span>)  res = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&#x27;-&#x27;</span>)  res = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;|&#x27;</span>)  res = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;/&#x27;</span>)  res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&#x27;\\&#x27;</span>)  res = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">htt</span><span class="params">(node tt)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="keyword">if</span>(g[tt.x][tt.y] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tt.s == <span class="number">1</span>)  res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">2</span>)  res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">3</span>)  tt.s = <span class="number">4</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">4</span>)  tt.s = <span class="number">3</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g[tt.x][tt.y] == <span class="string">&#x27;|&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tt.s == <span class="number">1</span>)  tt.s = <span class="number">2</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">2</span>)  tt.s = <span class="number">1</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">3</span>)  res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">4</span>)  res = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g[tt.x][tt.y] == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tt.s == <span class="number">1</span>)  tt.s = <span class="number">4</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">2</span>)  tt.s = <span class="number">3</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">3</span>)  tt.s = <span class="number">2</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">4</span>)  tt.s = <span class="number">1</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g[tt.x][tt.y] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tt.s == <span class="number">1</span>)  tt.s = <span class="number">3</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">2</span>)  tt.s = <span class="number">4</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">3</span>)  tt.s = <span class="number">1</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tt.s == <span class="number">4</span>)  tt.s = <span class="number">2</span>, res = <span class="built_in">get</span>(tt.x, tt.y, tt.s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">62</span>) &#123;</span><br><span class="line">        <span class="type">int</span> ppp = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node tt = <span class="built_in">irrget</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(res[tt.x][tt.y][tt.s] != <span class="number">-1</span>)  <span class="keyword">return</span> res[tt.x][tt.y][tt.s];</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tmp;  tmp.<span class="built_in">push_back</span>(x);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;  q.<span class="built_in">push</span>(x);</span><br><span class="line"></span><br><span class="line">    vis[tt.x][tt.y][tt.s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        node t = <span class="built_in">irrget</span>(q.<span class="built_in">front</span>());  q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> tx = t.x + wk[t.s][<span class="number">0</span>], ty = t.y + wk[t.s][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(tx &lt; <span class="number">1</span> || tx &gt; n || ty &lt; <span class="number">1</span> || ty &gt; m)  <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> ts = <span class="built_in">getdir</span>(t.s, g[tx][ty]);</span><br><span class="line">        <span class="keyword">if</span>(vis[tx][ty][ts]) &#123;</span><br><span class="line">            <span class="type">int</span> xq = <span class="built_in">get</span>(tx, ty, ts);</span><br><span class="line">            tmp.<span class="built_in">push_back</span>(xq);</span><br><span class="line">            flag = <span class="literal">true</span>;  <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> xq = <span class="built_in">get</span>(tx, ty, ts);</span><br><span class="line">        tmp.<span class="built_in">push_back</span>(xq);  q.<span class="built_in">push</span>(xq);</span><br><span class="line">        vis[tx][ty][ts] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        set&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; cnt;</span><br><span class="line">        <span class="type">int</span> k = tmp.<span class="built_in">size</span>(), lst = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            node t = <span class="built_in">irrget</span>(tmp[i]), lt;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; t.x &lt;&lt; &#x27; &#x27; &lt;&lt; t.y &lt;&lt; &#x27; &#x27; &lt;&lt; t.s &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">            <span class="keyword">if</span>(i != k - <span class="number">1</span>)  lt = <span class="built_in">irrget</span>(tmp[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(lst == <span class="number">-1</span>)  lst = t.s;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t.s != lst) &#123;</span><br><span class="line">                lst = t.s;</span><br><span class="line">                cnt.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(lt.x, lt.y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> u : tmp) &#123;</span><br><span class="line">            node t = <span class="built_in">irrget</span>(u);</span><br><span class="line">            res[t.x][t.y][t.s] = (<span class="type">int</span>)cnt.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> u : tmp) &#123;</span><br><span class="line">            node xq = <span class="built_in">irrget</span>(u);</span><br><span class="line">            vis[xq.x][xq.y][xq.s] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="type">int</span> y = <span class="built_in">htt</span>(tt);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> start;</span><br><span class="line">        <span class="keyword">if</span>(y != <span class="number">-1</span>) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(y);</span><br><span class="line">            <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                node t = <span class="built_in">irrget</span>(q.<span class="built_in">front</span>());  </span><br><span class="line">                <span class="type">int</span> tx = t.x + wk[t.s][<span class="number">0</span>], ty = t.y + wk[t.s][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(tx &lt; <span class="number">1</span> || tx &gt; n || ty &lt; <span class="number">1</span> || ty &gt; m) &#123;</span><br><span class="line">                    start = q.<span class="built_in">front</span>();  q.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> ts = <span class="built_in">getdir</span>(t.s, g[tx][ty]);</span><br><span class="line">                <span class="type">int</span> xq = <span class="built_in">get</span>(tx, ty, ts);</span><br><span class="line">                q.<span class="built_in">push</span>(xq);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(y == <span class="number">-1</span>)  start = x;</span><br><span class="line">        <span class="keyword">else</span>  start = <span class="built_in">htt</span>(<span class="built_in">irrget</span>(start));</span><br><span class="line">        q.<span class="built_in">push</span>(start);  tmp.<span class="built_in">push_back</span>(start);</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            node t = <span class="built_in">irrget</span>(q.<span class="built_in">front</span>());  q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> tx = t.x + wk[t.s][<span class="number">0</span>], ty = t.y + wk[t.s][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(tx &lt; <span class="number">1</span> || tx &gt; n || ty &lt; <span class="number">1</span> || ty &gt; m)  <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> ts = <span class="built_in">getdir</span>(t.s, g[tx][ty]);</span><br><span class="line">            <span class="type">int</span> xq = <span class="built_in">get</span>(tx, ty, ts);</span><br><span class="line">            tmp.<span class="built_in">push_back</span>(xq);  q.<span class="built_in">push</span>(xq);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; cnt;</span><br><span class="line">        <span class="type">int</span> k = tmp.<span class="built_in">size</span>(), lst = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            node t = <span class="built_in">irrget</span>(tmp[i]), lt;</span><br><span class="line">            <span class="keyword">if</span>(i != k - <span class="number">1</span>)  lt = <span class="built_in">irrget</span>(tmp[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(lst == <span class="number">-1</span>)  lst = t.s;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t.s != lst) &#123;</span><br><span class="line">                lst = t.s;</span><br><span class="line">                cnt.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(lt.x, lt.y));</span><br><span class="line">            &#125;</span><br><span class="line">            res[t.x][t.y][t.s] = cnt.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if(vis[4][4][2]) &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; &quot;x: &quot; &lt;&lt; x &lt;&lt; &quot; tt.x: &quot; &lt;&lt; tt.x &lt;&lt; &quot; tt.y: &quot; &lt;&lt; tt.y &lt;&lt; &quot; tt.s: &quot; &lt;&lt; tt.s &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    <span class="comment">//     exit(0);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res[tt.x][tt.y][tt.s];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; g[i][j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; ++k)  res[i][j][k] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q;  cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        string s; </span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; s;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">bfs</span>(<span class="built_in">get</span>(x, y, s)) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);  cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2024牛客多校1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> bfs </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 898 (Div. 4)    H</title>
      <link href="/2024/07/03/Codeforces%20Round%20898%20(Div.%204)%20H/"/>
      <url>/2024/07/03/Codeforces%20Round%20898%20(Div.%204)%20H/</url>
      
        <content type="html"><![CDATA[<h1 id="Mad-City"><a href="#Mad-City" class="headerlink" title="Mad City"></a><a href="https://codeforces.com/contest/1873/problem/H">Mad City</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>给定一个$n$个点，$n$条边的连通图。$A$从$a$点开始追赶处在$b$点的$B$，两人同时开始移动，并且$B$能准确预料到$A$下一步会去哪，并据此采取行动。问在两人都以最优策略开始移动的情况下，$A$是否永远都追不上$B$。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>$n$个点和$n$条边，意味着有且只有一个环。很明显$B$只要在走到环之前不被$A$截住的话就成功。分成以下几种情况：</p><ul><li>$a&#x3D;&#x3D;b$，直接输出$NO$;</li><li>$b$为环上的点，输出$YES$;</li><li>$b$不在环上，那么求一下环上离$B$最近的点到$A$，$B$的距离$dista$，$distb$，如果$dista&lt;&#x3D;distb$，说明$A$能在$B$赶到环上之前截住他，输出$NO$;反之，输出$YES$。</li></ul><p><img src="/2024/07/03/Codeforces%20Round%20898%20(Div.%204)%20H/post_1.jpg" alt="post_1"></p><p>思路理清了，接下来考虑如何实现。</p><p>首先是判环，可以开一个$f$数组记录每个点的的前一个节点，初始化为$0$，然后进行$dfs$，在遍历到与当前点$x$相连的所有点时，如果碰到某个点$u$的$f[u]$不为$0$，则意味着碰到环了，使$f[u]&#x3D;x$，然后就可以借助$f$数组求出环上的每个点。</p><p>环求出来之后就好办了，用$bfs$求一下距$B$最近的环上的点，再从这一点出发$bfs$求一下$dista$，$distb$即可。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 200100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;e[maxn];</span><br><span class="line"><span class="type">int</span> n,a,b,pre[maxn],dist[maxn];</span><br><span class="line"><span class="type">bool</span> ok,cyc[maxn],vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ok)  <span class="keyword">return</span> ;</span><br><span class="line">    pre[x]=fa;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> u:e[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(u==fa)  <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(pre[u])&#123;</span><br><span class="line">            pre[u]=x;  cyc[u]=<span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> t=u;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                t=pre[t];  cyc[t]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(t==u)&#123;</span><br><span class="line">                    ok=<span class="literal">true</span>;  <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(u,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ok=<span class="literal">false</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)  e[i].<span class="built_in">clear</span>(),cyc[i]=<span class="literal">false</span>,pre[i]=<span class="number">0</span>,dist[i]=<span class="number">1e10</span>,vis[i]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        e[x].<span class="built_in">push_back</span>(y);  e[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(a==b)  &#123;cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">if</span>(cyc[b])  &#123;cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="type">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(b),vis[b]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;!pos)&#123;</span><br><span class="line">        <span class="type">int</span> t=q.<span class="built_in">front</span>();  q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> u:e[t])&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[u])  <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(cyc[u])  &#123;pos=u;<span class="keyword">break</span>;&#125;</span><br><span class="line">            q.<span class="built_in">push</span>(u);  vis[u]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())  q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">push</span>(pos);  dist[pos]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;(dist[a]==<span class="number">1e10</span>||dist[b]==<span class="number">1e10</span>))&#123;</span><br><span class="line">        <span class="type">int</span> t=q.<span class="built_in">front</span>();  q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> u:e[t])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[u]!=<span class="number">1e10</span>)  <span class="keyword">continue</span>;</span><br><span class="line">            dist[u]=<span class="built_in">min</span>(dist[u],dist[t]+<span class="number">1</span>);</span><br><span class="line">            q.<span class="built_in">push</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[a]&lt;=dist[b])  cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>  cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t; cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 760 (Div. 3)  G</title>
      <link href="/2023/10/11/Codeforces%20Round%20760%20(Div.%203)%20%20G/"/>
      <url>/2023/10/11/Codeforces%20Round%20760%20(Div.%203)%20%20G/</url>
      
        <content type="html"><![CDATA[<h1 id="Trader-Problem"><a href="#Trader-Problem" class="headerlink" title="Trader Problem"></a><a href="https://codeforces.com/contest/1618/problem/G">Trader Problem</a></h1><hr><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>你有$n$个物品，第$i$-th个物品价值为$a_i$，商人有$m$个物品，第$i$-th个物品价值为$b_i$，你可以将自己的某个物品，假设价值为$a_i$，与商人手中价值不超过$a_i+k$的物品交换。现在有$q$次询问，每次给定一个$k$值，求能通过以上操作能使手中物品价值之和到达的最大值。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>将物品价值从大到小排序后进行合并。相邻插值小于$k$即可进行合并。同时拿并查集维护可选数。可以对需要查询的$k$进行排序，减小复杂度。具体实现看代码。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 400100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__int128_t</span> int128;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">int</span> f[maxn];  <span class="comment">//并查集</span></span><br><span class="line"><span class="type">int</span> sz[maxn],sum[maxn];   <span class="comment">//当前集合可取数的数量和排序后的前缀和</span></span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;a[maxn],que[maxn];   <span class="comment">//物品和询问,离线</span></span><br><span class="line">map&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;&gt;num;  <span class="comment">//相邻物品可合并的值</span></span><br><span class="line"><span class="type">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]!=x)  f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,q,res=<span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+m;++i)  cin &gt;&gt; a[i].first,a[i].second=i;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+m;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].second&lt;=n)  res+=a[i].first;</span><br><span class="line">        sz[i]=(a[i].second&lt;=n);</span><br><span class="line">        f[i]=i;  sum[i]=sum[i<span class="number">-1</span>]+a[i].first;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span>)  num[a[i].first-a[i<span class="number">-1</span>].first].<span class="built_in">push_back</span>(i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i)  cin &gt;&gt; que[i].first,que[i].second=i;</span><br><span class="line">    <span class="built_in">sort</span>(que+<span class="number">1</span>,que+q+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">auto</span> it=num.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(que[i].first==que[i<span class="number">-1</span>].first)  &#123;ans[que[i].second]=res;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">while</span>(it!=num.<span class="built_in">end</span>()&amp;&amp;it-&gt;first&lt;=que[i].first)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> u:it-&gt;second)&#123;   <span class="comment">//合并</span></span><br><span class="line">                <span class="type">int</span> a=<span class="built_in">find</span>(u),b=<span class="built_in">find</span>(u+<span class="number">1</span>);</span><br><span class="line">                res-=sum[a]-sum[a-sz[a]]+sum[b]-sum[b-sz[b]];</span><br><span class="line">                f[a]=b;  sz[b]+=sz[a];</span><br><span class="line">                res+=sum[b]-sum[b-sz[b]];</span><br><span class="line">            &#125;</span><br><span class="line">            ++it;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[que[i].second]=res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i)  cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promising String (hard version)</title>
      <link href="/2023/10/07/Codeforces%20Round%20780%20(Div.%203)%20F2/"/>
      <url>/2023/10/07/Codeforces%20Round%20780%20(Div.%203)%20F2/</url>
      
        <content type="html"><![CDATA[<h1 id="Promising-String-hard-version"><a href="#Promising-String-hard-version" class="headerlink" title="Promising String (hard version)"></a><a href="https://codeforces.com/contest/1660/problem/F2">Promising String (hard version)</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>给定一个只含$+$和$-$两种字符的字符串，可以进行以下操作：</p><ul><li>选定两个相邻的$-$，使其变为$+$。</li></ul><p>求通过任意次操作后，$+$和$-$数量相等的子串数量。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>前缀和的思想，$+$加$1$，$-$减$1$，当前值为$0$意味着符合要求。然后有一个简单的性质，如果当前值为负数且为$3$的倍数也可以通过操作使其合法。那么，问题就是求满足：</p><p>$\left{\begin{aligned}&amp;0≤l&lt;r≤n\&amp;a_r≤a_l\&amp;a_l≡a_r(mod\ 3)\end{aligned}\right.$</p><p>同余分组后求逆序对数即可。</p><p>注意树状数组中下标不能为负数，所以可以开两倍空间。然后倒序求逆序对。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 400100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__int128_t</span> int128;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">-1e8</span>;</span><br><span class="line"><span class="type">int</span> tre[<span class="number">3</span>][maxn],n,m,a[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> t,<span class="type">int</span> x)</span></span>&#123;<span class="keyword">while</span>(x&lt;=m)  tre[t][x]++,x+=<span class="built_in">lowbit</span>(x);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> t,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)  res+=tre[t][x],x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;  m=<span class="number">2</span>*n+<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>,base=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;++j)&#123;</span><br><span class="line">            tre[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string s;  cin &gt;&gt; s;  s=<span class="string">&quot; &quot;</span>+s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)  a[i]=a[i<span class="number">-1</span>]+(s[i]==<span class="string">&#x27;+&#x27;</span>?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="type">int</span> m=(a[i]%<span class="number">3</span>+<span class="number">3</span>)%<span class="number">3</span>;</span><br><span class="line">        ans+=<span class="built_in">sum</span>(m,a[i]+base);  <span class="built_in">add</span>(m,a[i]+base);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t; cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 805 (Div. 3)  G2</title>
      <link href="/2023/09/29/Codeforces%20Round%20805%20(Div.%203)%20%20G2/"/>
      <url>/2023/09/29/Codeforces%20Round%20805%20(Div.%203)%20%20G2/</url>
      
        <content type="html"><![CDATA[<h1 id="Passable-Paths-hard-version"><a href="#Passable-Paths-hard-version" class="headerlink" title="Passable Paths (hard version)"></a><a href="https://codeforces.com/contest/1702/problem/G2">Passable Paths (hard version)</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>给定一颗大小为$n$的树，$q$次询问，每次给出一个大小为$k$的点集，判断树上是否有一条简单路径能将点集中的所有点全部覆盖。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>假设简单路径存在，那么端点一定是点集中的点。一个比较简单的性质是：其中一个端点$x$是深度最深的点，另一个是距这个点最远的点$y$。深度最深的点只需要$dfs$预处理一下即可，其他点与这个点的距离只需要借助$LCA$即可求出：$$dis&#x3D;dep[x]+dep[y]-dep[lca(x,y)]$$</p><p>接下来只需要判断其余点是否在这两个端点的简单路径上即可，分以下几种情况：</p><ul><li>$dep[i]&lt;dep[lca(x,y)]$，不可行；</li><li>$lca(x,i)&#x3D;&#x3D;i||lca(y,i)&#x3D;&#x3D;i$，可行；</li><li>其余情况均不可行。</li></ul><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 200100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxm 30</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__int128_t</span> int128;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;e[maxn];</span><br><span class="line"><span class="type">int</span> p[maxn],depth[maxn],f[maxn][maxm];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    f[x][<span class="number">0</span>]=fa;  depth[x]=depth[fa]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;maxm;++k)  f[x][k]=f[f[x][k<span class="number">-1</span>]][k<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> u:e[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(u==fa)  <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(u,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[a]&lt;depth[b])  <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=maxm<span class="number">-1</span>;k&gt;=<span class="number">0</span>;--k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[f[a][k]]&gt;=depth[b])  a=f[a][k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a==b)  <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=maxm<span class="number">-1</span>;k&gt;=<span class="number">0</span>;--k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[a][k]!=f[b][k])  a=f[a][k],b=f[b][k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;  cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;  cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        e[x].<span class="built_in">push_back</span>(y);  e[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> q;  cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> k,x=<span class="number">0</span>;  cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">            cin &gt;&gt; p[i];</span><br><span class="line">            <span class="keyword">if</span>(depth[p[i]]&gt;depth[x])  x=p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> y=p[<span class="number">1</span>],dis=depth[x]+depth[y]<span class="number">-2</span>*depth[<span class="built_in">lca</span>(x,y)];</span><br><span class="line">        <span class="keyword">if</span>(x==y)  y=p[<span class="number">2</span>],dis=depth[x]+depth[y]<span class="number">-2</span>*depth[<span class="built_in">lca</span>(x,y)];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=k;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i]==x)  <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp=depth[x]+depth[p[i]]<span class="number">-2</span>*depth[<span class="built_in">lca</span>(x,p[i])];</span><br><span class="line">            <span class="keyword">if</span>(dis&lt;tmp)&#123;</span><br><span class="line">                dis=tmp;</span><br><span class="line">                y=p[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> anc=<span class="built_in">lca</span>(x,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[p[i]]&lt;depth[anc])  &#123;flag=<span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> tx=<span class="built_in">lca</span>(p[i],x),ty=<span class="built_in">lca</span>(p[i],y);</span><br><span class="line">                <span class="keyword">if</span>(tx!=p[i]&amp;&amp;ty!=p[i])  &#123;flag=<span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)  cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span>  cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Another Bus Route Problem</title>
      <link href="/2023/09/25/Another%20Bus%20Route%20Problem/"/>
      <url>/2023/09/25/Another%20Bus%20Route%20Problem/</url>
      
        <content type="html"><![CDATA[<h1 id="Another-Bus-Route-Problem"><a href="#Another-Bus-Route-Problem" class="headerlink" title="Another Bus Route Problem"></a><a href="https://pintia.cn/problem-sets/1705510247604809728/exam/problems/1705514248467492868?type=7&page=0">Another Bus Route Problem</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>给定一棵树以及$m$条巴士路线，对于每条路线可以在起点和终点上车，在路线上任意点下车。求从节点$1$出发，到每个点所需乘坐的最少巴士数量，如果不能到达则输出$-1$。</p><p>树以如下方式给出：</p><p>第一行包括两个整数$n$和$m$，分别表示点的数量和巴士路线的数量。接下来一行共有$n-1$个数，第$i$个数$p[i]$表示$i+1$和$p[i]$连有一条边，且$p[i]&lt;&#x3D;i$。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>裸的$bfs$。把$m$条巴士路线看成$m$条边，从节点$1$开始$bfs$，遍历到的每个点都更新一下原图中它的所有父节点的答案。碰到已经被赋值过的父节点就停止。因为已经被赋值过表示在之前某条巴士路线就已经经过这个点，并且由于是从节点$1$进行$bfs$，所以从$1$到这一点的路径一定是走过的。</p><p>题中特殊的建树方式，可以看成是每个$i+1$的父节点即为$p[i]$。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 200100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__int128_t</span> int128;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">int</span> fa[maxn],ans[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;bus[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)  ans[i]=<span class="number">1e9</span>,cin &gt;&gt; fa[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;  cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        bus[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        bus[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;  q.<span class="built_in">push</span>(<span class="number">1</span>);  ans[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t=q.<span class="built_in">front</span>();  q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> u:bus[t])&#123;</span><br><span class="line">            <span class="keyword">while</span>(ans[u]==<span class="number">1e9</span>)&#123;</span><br><span class="line">                ans[u]=ans[t]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!bus[u].<span class="built_in">empty</span>())  q.<span class="built_in">push</span>(u);</span><br><span class="line">                u=fa[u];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]!=<span class="number">1e9</span>)  cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span>  cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023ICPC网络预选赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 155  D</title>
      <link href="/2023/09/25/Educational%20Codeforces%20Round%20155%20%20D/"/>
      <url>/2023/09/25/Educational%20Codeforces%20Round%20155%20%20D/</url>
      
        <content type="html"><![CDATA[<h1 id="Sum-of-XOR-Functions"><a href="#Sum-of-XOR-Functions" class="headerlink" title="Sum of XOR Functions"></a><a href="https://codeforces.com/contest/1879/problem/D">Sum of XOR Functions</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>给定一个长度为$n$的$a$数组，求$\sum_{l&#x3D;1}^n\sum_{r&#x3D;l}^nf(l,r)⋅(r-l+1)$的值 ，其中$f(l,r)$表示区间$[l,r]$的异或值。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>拆位是位运算题目的常用套路，这题也不例外。先用类似前缀和的思想求一下以$1$为起始位置的每一段的异或值$pre$。</p><p>然后对二进制下的每一位进行计算，假设当前$pre[i]&#x3D;(100010)$，那么对于每一位，只有当之前某个$pre$在这一位上与其异或为$1$，则对答案有贡献。</p><p>可以遍历$a$数组，并在过程中累加$1$和$0$的数量即可进行计算。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 300100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__int128_t</span> int128;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> a[maxn],pre[maxn],x[<span class="number">2</span>],num[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,ans=<span class="number">0</span>;  cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)  cin &gt;&gt; a[i],pre[i]=pre[i<span class="number">-1</span>]^a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">33</span>;++k)&#123;</span><br><span class="line">        x[<span class="number">0</span>]=<span class="number">1</span>,x[<span class="number">1</span>]=<span class="number">0</span>;   <span class="comment">//当前有几个1或0</span></span><br><span class="line">        num[<span class="number">0</span>]=<span class="number">0</span>,num[<span class="number">1</span>]=<span class="number">0</span>;  <span class="comment">//1和0对答案的贡献</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            num[<span class="number">0</span>]=(num[<span class="number">0</span>]+x[<span class="number">0</span>])%mod;</span><br><span class="line">            num[<span class="number">1</span>]=(num[<span class="number">1</span>]+x[<span class="number">1</span>])%mod;</span><br><span class="line">            <span class="keyword">if</span>((pre[i]&gt;&gt;k)&amp;<span class="number">1</span>)  ans=(ans+(<span class="number">1</span>&lt;&lt;k)*num[<span class="number">0</span>])%mod,x[<span class="number">1</span>]++;</span><br><span class="line">            <span class="keyword">else</span>  ans=(ans+(<span class="number">1</span>&lt;&lt;k)*num[<span class="number">1</span>])%mod,x[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拆位 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 753 (Div. 3)  F</title>
      <link href="/2023/09/21/Codeforces%20Round%20753%20(Div.%203)%20%20%20%20%20F/"/>
      <url>/2023/09/21/Codeforces%20Round%20753%20(Div.%203)%20%20%20%20%20F/</url>
      
        <content type="html"><![CDATA[<h1 id="Robot-on-the-Board-2"><a href="#Robot-on-the-Board-2" class="headerlink" title="Robot on the Board 2"></a><a href="https://codeforces.com/contest/1607/problem/F">Robot on the Board 2</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>机器人站在一个$n\times m$大小的矩阵上，每个单元格都写有’L’、’R’、’U’和’D’当中的某一字符，表示机器人在此格移动方向——分别为左、右、上和下。</p><p>当走出矩阵或者走到已经访问过的单元格时停止移动。问，机器人从哪个单元格出发能移动的步数最多，输出单元格的坐标以及最大数量的步数。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>翻译一下题意即为，给定一个有向图，每个点的权值为$1$，且每个点只有一条出边，从某个点出发，每个点只能经过一次，求从何处出发所经过点的权值和最大，并求出最大值。</p><p>那么直接枚举每个点进行记忆化搜索即可，考虑到有环的存在，可以开个数组记录当前点的状态，如：$0$表示未被搜索到，$1$表示正在被搜索中，$2$表示已经被搜索过了。那么如果我们在搜索中遇到了状态为$1$的点就意味着碰到环了，此时记录一下环的大小即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 4000100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__int128_t</span> int128;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">int</span> e[maxn],v[maxn],state[maxn];</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(state[x]==<span class="number">2</span>)  <span class="keyword">return</span> v[x];</span><br><span class="line">    <span class="keyword">if</span>(state[x]==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> cur=<span class="number">1</span>,u=e[x];</span><br><span class="line">        <span class="keyword">while</span>(u!=x)  ++cur,state[u]=<span class="number">2</span>,u=e[u];</span><br><span class="line">        u=e[x];</span><br><span class="line">        <span class="keyword">while</span>(u!=x)  v[u]=cur,u=e[u];</span><br><span class="line">        state[x]=<span class="number">2</span>;  v[x]=cur;</span><br><span class="line">        <span class="keyword">return</span> v[x];</span><br><span class="line">    &#125;</span><br><span class="line">    state[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(e[x]);</span><br><span class="line">    <span class="keyword">if</span>(state[x]!=<span class="number">2</span>)  v[x]=v[e[x]]+<span class="number">1</span>,state[x]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> v[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    l=r+<span class="number">1</span>;  state[<span class="number">0</span>]=<span class="number">2</span>;   <span class="comment">//表示终点</span></span><br><span class="line">    <span class="type">int</span> n,m,ans=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">            ++r;</span><br><span class="line">            <span class="type">char</span> x;  cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="string">&#x27;L&#x27;</span>&amp;&amp;j!=<span class="number">1</span>)  e[r]=r<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="string">&#x27;R&#x27;</span>&amp;&amp;j!=m)  e[r]=r+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="string">&#x27;U&#x27;</span>&amp;&amp;i!=<span class="number">1</span>)  e[r]=r-m;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="string">&#x27;D&#x27;</span>&amp;&amp;i!=n)  e[r]=r+m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;<span class="built_in">dfs</span>(i))  ans=v[i],res=i-l+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (res<span class="number">-1</span>)/m+<span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; (res<span class="number">-1</span>)%m+<span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t; cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，还可以在$dfs$前把所有环找出来。不过这种做法较上一种做法效率较低，而且还碰到了某些$ub$错误(C++17能过，C++20不能过，，)。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 2010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">char</span> g[maxn][maxn];</span><br><span class="line"><span class="type">int</span> v[maxn][maxn];</span><br><span class="line"><span class="type">bool</span> vis[maxn][maxn];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tx=x,ty=y;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;path;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tx&lt;<span class="number">1</span>||tx&gt;n||ty&lt;<span class="number">1</span>||ty&gt;m)  <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(vis[tx][ty])&#123;</span><br><span class="line">            <span class="type">int</span> cur=path.<span class="built_in">end</span>()-<span class="built_in">find</span>(path.<span class="built_in">begin</span>(),path.<span class="built_in">end</span>(),<span class="built_in">make_pair</span>(tx,ty));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it=<span class="built_in">find</span>(path.<span class="built_in">begin</span>(),path.<span class="built_in">end</span>(),<span class="built_in">make_pair</span>(tx,ty));it!=path.<span class="built_in">end</span>();++it)  v[it-&gt;first][it-&gt;second]=cur;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[tx][ty]=<span class="number">1</span>;</span><br><span class="line">        path.<span class="built_in">push_back</span>(&#123;tx,ty&#125;);</span><br><span class="line">        <span class="keyword">if</span>(g[tx][ty]==<span class="string">&#x27;U&#x27;</span>)  tx--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(g[tx][ty]==<span class="string">&#x27;D&#x27;</span>)  tx++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(g[tx][ty]==<span class="string">&#x27;L&#x27;</span>)  ty--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(g[tx][ty]==<span class="string">&#x27;R&#x27;</span>)  ty++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;n||y&lt;<span class="number">1</span>||y&gt;m)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(v[x][y])  <span class="keyword">return</span> v[x][y];</span><br><span class="line">    <span class="keyword">if</span>(g[x][y]==<span class="string">&#x27;U&#x27;</span>)  <span class="keyword">return</span>  v[x][y]=<span class="built_in">dfs</span>(x<span class="number">-1</span>,y)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g[x][y]==<span class="string">&#x27;D&#x27;</span>) <span class="keyword">return</span>  v[x][y]=<span class="built_in">dfs</span>(x+<span class="number">1</span>,y)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g[x][y]==<span class="string">&#x27;L&#x27;</span>) <span class="keyword">return</span>  v[x][y]=<span class="built_in">dfs</span>(x,y<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g[x][y]==<span class="string">&#x27;R&#x27;</span>) <span class="keyword">return</span>  v[x][y]=<span class="built_in">dfs</span>(x,y+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> v[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> resx,resy,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">            cin &gt;&gt; g[i][j];  v[i][j]=<span class="number">0</span>;  vis[i][j]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j])  <span class="built_in">check</span>(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i,j);</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;v[i][j])  ans=v[i][j],resx=i,resy=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; resx &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; resy &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t; cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pa?sWorD</title>
      <link href="/2023/09/20/PasWorD/"/>
      <url>/2023/09/20/PasWorD/</url>
      
        <content type="html"><![CDATA[<h1 id="Pa-sWorD"><a href="#Pa-sWorD" class="headerlink" title="Pa?sWorD"></a><a href="https://pintia.cn/problem-sets/1703372159713652736/exam/problems/1703372337216602120?type=7&page=0">Pa?sWorD</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>给定一个字符串s，其中只包含小写字母，大写字母，数字和问号$?$。可以进行一下操作：</p><ul><li>将小写字母变为相对应的大写字母或不变；</li><li>将问号$?$变为大写字母，小写字母或数字中的任意一个字符。</li></ul><p>要求满足以下条件的所有方案数的数量：</p><ul><li>字符串中至少有一个小写字母；</li><li>字符串中至少有一个大写字母；</li><li>字符串中至少有一个数字；</li><li>字符串中任意相邻字符不能相同。</li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>先考虑简单的三维$dp[i][j][k]$，表示第$i$个字符为$j$且前$i$个字符中各种字符的存在状态为$k$的合法数量。</p><p>其中$k$为一个三位二进制数，如：</p><ul><li>100表示只存在数字；</li><li>010表示只存在大写字母；</li><li>001表示只存在小写字母。</li></ul><p>剩余状态也是类似的道理。</p><p>然后考虑状态转移，转移的过程只有一个限制条件，即相邻字符不能相同，则状态转移如下：</p><p>$$dp[i][x][k|t]&#x3D;dp[i-1][j][k],x!&#x3D;j$$</p><p>其中，当$x$分别为小写字母，大写字母，数字的时候$t$分别为$1$，$2$，$4$。</p><p>假设当前遍历到小写字母，则当它为大、小写字母的时候分别进行状态转移；假设遍历到问号，则遍历所有可以变成的字符进行转移。</p><h4 id="时间复杂度（O-n-8-8-70-）空间复杂度（O-n-8-8-70-）"><a href="#时间复杂度（O-n-8-8-70-）空间复杂度（O-n-8-8-70-）" class="headerlink" title="时间复杂度（O(n*8*8*70)）空间复杂度（O(n*8*8*70)）"></a>时间复杂度（O(n*8*8*70)）空间复杂度（O(n*8*8*70)）</h4><p>真巧，全都超限。</p><p>对于空间复杂度，仔细观察转移方程发现，第$i$项只第$i-1$项有关，故可以考虑滚动数组优化；至于时间复杂度，则可以考虑使用差分优化。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 70</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> d[maxn][<span class="number">1</span>&lt;&lt;<span class="number">3</span>],g[maxn][<span class="number">1</span>&lt;&lt;<span class="number">3</span>],dis[<span class="number">1</span>&lt;&lt;<span class="number">3</span>][maxn];</span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;num;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="string">&#x27;a&#x27;</span>;i&lt;=<span class="string">&#x27;z&#x27;</span>;++i)  num[<span class="built_in">char</span>(i)]=++cur;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="string">&#x27;A&#x27;</span>;i&lt;=<span class="string">&#x27;Z&#x27;</span>;++i)  num[<span class="built_in">char</span>(i)]=++cur;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="string">&#x27;0&#x27;</span>;i&lt;=<span class="string">&#x27;9&#x27;</span>;++i)  num[<span class="built_in">char</span>(i)]=++cur;</span><br><span class="line">    num[<span class="string">&#x27;?&#x27;</span>]=<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n,ans=<span class="number">0</span>;  cin &gt;&gt; n;</span><br><span class="line">    string s;  cin &gt;&gt; s;</span><br><span class="line">    s=<span class="string">&quot; &quot;</span>+s;</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(g,d,<span class="built_in">sizeof</span>(d));</span><br><span class="line">        <span class="built_in">memset</span>(dis,<span class="number">0</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">62</span>;++j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> state=<span class="number">0</span>;state&lt;<span class="number">8</span>;++state)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!g[j][state]||num[s[i]]==j&amp;&amp;num[s[i]]&gt;=<span class="number">27</span>)  <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> tmp=g[j][state];</span><br><span class="line">                <span class="keyword">if</span>(s[i]==<span class="string">&#x27;?&#x27;</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> sta=state|<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=<span class="number">1</span>&amp;&amp;j&lt;=<span class="number">26</span>)  dis[sta][<span class="number">1</span>]=(dis[sta][<span class="number">1</span>]+tmp)%mod,dis[sta][j]=(dis[sta][j]-tmp)%mod,dis[sta][j+<span class="number">1</span>]=(dis[sta][j+<span class="number">1</span>]+tmp)%mod,dis[sta][<span class="number">27</span>]=(dis[sta][<span class="number">27</span>]-tmp)%mod;</span><br><span class="line">                    <span class="keyword">else</span>  dis[sta][<span class="number">1</span>]=(dis[sta][<span class="number">1</span>]+tmp)%mod,dis[sta][<span class="number">27</span>]=(dis[sta][<span class="number">27</span>]-tmp)%mod;</span><br><span class="line">                    sta=state|<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=<span class="number">27</span>&amp;&amp;j&lt;=<span class="number">52</span>)  dis[sta][<span class="number">27</span>]=(dis[sta][<span class="number">27</span>]+tmp)%mod,dis[sta][j]=(dis[sta][j]-tmp)%mod,dis[sta][j+<span class="number">1</span>]=(dis[sta][j+<span class="number">1</span>]+tmp)%mod,dis[sta][<span class="number">53</span>]=(dis[sta][<span class="number">53</span>]-tmp)%mod;</span><br><span class="line">                    <span class="keyword">else</span>  dis[sta][<span class="number">27</span>]=(dis[sta][<span class="number">27</span>]+tmp)%mod,dis[sta][<span class="number">53</span>]=(dis[sta][<span class="number">53</span>]-tmp)%mod;</span><br><span class="line">                    sta=state|<span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=<span class="number">53</span>&amp;&amp;j&lt;=<span class="number">62</span>)  dis[sta][<span class="number">53</span>]=(dis[sta][<span class="number">53</span>]+tmp)%mod,dis[sta][j]=(dis[sta][j]-tmp)%mod,dis[sta][j+<span class="number">1</span>]=(dis[sta][j+<span class="number">1</span>]+tmp)%mod,dis[sta][<span class="number">63</span>]=(dis[sta][<span class="number">63</span>]-tmp)%mod;</span><br><span class="line">                    <span class="keyword">else</span>  dis[sta][<span class="number">53</span>]=(dis[sta][<span class="number">53</span>]+tmp)%mod,dis[sta][<span class="number">63</span>]=(dis[sta][<span class="number">63</span>]-tmp)%mod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(num[s[i]]&lt;=<span class="number">26</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> cur=num[s[i]],sta=state|<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(cur!=j)  d[cur][sta]=(d[cur][sta]+tmp)%mod;</span><br><span class="line">                    cur=num[s[i]]+<span class="number">26</span>,sta=state|<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(cur!=j)  d[cur][sta]=(d[cur][sta]+tmp)%mod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(num[s[i]]&lt;=<span class="number">62</span>&amp;&amp;num[s[i]]&gt;=<span class="number">27</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> cur=num[s[i]],sta;</span><br><span class="line">                    <span class="keyword">if</span>(cur&gt;=<span class="number">27</span>&amp;&amp;cur&lt;=<span class="number">52</span>)  sta=state|<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(cur&gt;=<span class="number">53</span>&amp;&amp;cur&lt;=<span class="number">62</span>)  sta=state|<span class="number">4</span>;</span><br><span class="line">                    d[cur][sta]=(d[cur][sta]+tmp)%mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> state=<span class="number">0</span>;state&lt;<span class="number">8</span>;++state)&#123;</span><br><span class="line">            <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">62</span>;++j)&#123;</span><br><span class="line">                cur=(cur+dis[state][j])%mod;</span><br><span class="line">                d[j][state]=(d[j][state]+cur)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">65</span>;++i)  ans=(ans+d[i][<span class="number">7</span>])%mod;</span><br><span class="line">    cout &lt;&lt; (ans%mod+mod)%mod &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fopen</span>(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023ICPC网络预选赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Klee likes making friends</title>
      <link href="/2023/08/24/Klee%20likes%20making%20friends/"/>
      <url>/2023/08/24/Klee%20likes%20making%20friends/</url>
      
        <content type="html"><![CDATA[<h1 id="Klee-likes-making-friends"><a href="#Klee-likes-making-friends" class="headerlink" title="Klee likes making friends"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7296">Klee likes making friends</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><hr><p>总共n个人，从任意m个人里选两个人，求所需的最小价值。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><hr><p>一眼看过去很像单调队列优化dp的典题，然后用单调队列做了半天，发现单调队列存储的信息太少了，做不了这个题。然后就想到了用后缀数组。<br>$dp[i][j]$表示倒数第一个朋友是$i$，倒数第二个朋友是$j$，那么很容易得出倒数第三个朋友所属的区间为$[i-m,j-1]$，拿后缀最小值数组记录一下即可。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxm 20010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 2010</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__int128_t</span> int128;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> w[maxm],dp[maxn][maxn];   <span class="comment">//dp[i][j]表示到第i位且i,j是朋友的合法情况下的最小答案</span></span><br><span class="line"><span class="type">int</span> g[maxn][maxn];   <span class="comment">//g[i][j]表示第i位且i,j是朋友,倒数第二个朋友从i-1到j的最小值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,ans=inf;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)  cin &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;     <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)  dp[i][j]=g[i][j]=inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">1</span>;--j)&#123;   <span class="comment">//倒着求后缀最小值</span></span><br><span class="line">            dp[i][j]=w[i]+w[j];</span><br><span class="line">            g[i][j]=<span class="built_in">min</span>(g[i][j+<span class="number">1</span>],dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=m+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;j&gt;=i-m+<span class="number">1</span>;--j)&#123;</span><br><span class="line">            <span class="type">int</span> u=(i<span class="number">-1</span>)%m+<span class="number">1</span>,v=(j<span class="number">-1</span>)%m+<span class="number">1</span>;</span><br><span class="line">            dp[u][v]=g[v][u]+w[i];      <span class="comment">//在取模后会惊奇的发现，i和i-m是一个值，然后代码就很好看^_^</span></span><br><span class="line">            g[u][v]=<span class="built_in">min</span>(g[u][j%m+<span class="number">1</span>],dp[u][v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n-m+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=n-m+<span class="number">1</span>;j&lt;i;++j)&#123;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,dp[(i<span class="number">-1</span>)%m+<span class="number">1</span>][(j<span class="number">-1</span>)%m+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;  cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023杭电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
